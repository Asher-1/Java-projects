package cn.detector.util;

import java.util.Vector;

public class PointToLine_Distance {
	// 点到直线的最短距离的判断 点（x0,y0） 到由两点组成的线段（x1,y1） ,( x2,y2 )
	
    public double getDistance(int x1, int y1, int x2, int y2, int x0,
           int y0) {
        double space = 0;
        double a, b, c;
        a = lineSpace(x1, y1, x2, y2);// 线段的长度
        b = lineSpace(x1, y1, x0, y0);// 待求点到线段端点(x1,y1)的距离
        c = lineSpace(x2, y2, x0, y0);// 待求点到线段端点(x2,y2)的距离
//        if (c <= 0.000001 || b <= 0.000001) {
//           space = 0;
//           return space;
//        }
//        if (a <= 0.000001) {
//           space = b;
//           return space;
//        }
//        if (c * c >= a * a + b * b) {
//           space = b;
//           return space;
//        }
//        if (b * b >= a * a + c * c) {
//           space = c;
//           return space;
//        }
        double p = (a + b + c) / 2;// 半周长
        double s = Math.sqrt(p * (p - a) * (p - b) * (p - c));// 海伦公式求面积
        space = 2 * s / a;// 返回点到线的距离（利用三角形面积公式求高）
        return space;
    }
    // 计算两点之间的距离
    public static double lineSpace(int x1, int y1, int x2, int y2) {
        double lineLength = 0;
        lineLength = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2)
               * (y1 - y2));
        return lineLength;
    }
    //判断点是否在给定距离之间
    public static Boolean contains(Vector<MyPoint>pointsVector,Vector<MyPoint>v_Joint,Vector<MyPoint>vector,double para,int count){
    	//获取点并添加到vector1容器中
    	for(int i=0; i<v_Joint.size();i++){
    		MyPoint tmp = (MyPoint) v_Joint.elementAt(i);
    		
    		//夹逼中间的关节
    		for(int j=0; j<(int)width_Distance; j++){
    			Boolean bool = tmp.point.x > middle-j && tmp.point.x < middle+j;
    			//获取三个点之后，退出循环
    			if(count >= 3){
    				return;
    			}
    			//
    			if(bool){
    				//循环pointsVector容器，寻找与tmp点相对应的点对象
    				for(int k=0; k<pointsVector.size();k++){
    	    			MyPoint pt = (MyPoint) pointsVector.elementAt(k);
    	    			if(tmp.cutFlag == pt.cutFlag){
    	    				//创建新容器的MyPoint元素
    	    				MyPoint m = new MyPoint();
    	    				m.point.x = pt.point.x;
    	    				m.point.y = pt.point.y;
    	    				//将得到的点去除
    	    				pointsVector.removeElementAt(k);
    	    				
    	    				//把点加入容器
    	    				vector1.add(m);
    	    			}
    	    		}
    				//记录加入点的数量
    				count++;
    			}
    		}
    		
    		
    		
    		
    	}
    
    	return true;
    }

}
