package cn.detector.util;

import java.awt.Point;
import java.util.Vector;

public class Coordinate_Transformation {
	
	Vector<MyPoint> v_Joint = new Vector<MyPoint>(); // 定义v_Joint用于缓存转换后的关节点对象
	Vector<MyPoint> pointsVector;  // 定义pointsVector容器用于存储关节点
	//创建五个用于缓存人体五个部分的关节点坐标，有左上（vector2），中部（vector1），右上（vector3），左下（vector4），右下（vector5）部位
	Vector<MyPoint> vector1 = new Vector<MyPoint>();
	Vector<MyPoint> vector2 = new Vector<MyPoint>();
	Vector<MyPoint> vector3 = new Vector<MyPoint>();
	Vector<MyPoint> vector4 = new Vector<MyPoint>();
	Vector<MyPoint> vector5 = new Vector<MyPoint>();
	//获取容器函数
	public Vector<MyPoint> getVector1() {
		return vector1;
	}
	public Vector<MyPoint> getVector2() {
		return vector2;
	}
	public Vector<MyPoint> getVector3() {
		return vector3;
	}
	public Vector<MyPoint> getVector4() {
		return vector4;
	}
	public Vector<MyPoint> getVector5() {
		return vector5;
	}
	//缓存边框的宽度和高度
	private double heigh_Distance;
	private double width_Distance;
	//用于缓存原始坐标值
	private int x1,y1;
	private int x2,y2;
	@SuppressWarnings("unused")
	private int x3,y3;
	private int x4,y4;
	//用于缓存转换后的坐标值
	private int Jx1,Jy1;
	@SuppressWarnings("unused")
	private int Jx2,Jy2;
	@SuppressWarnings("unused")
	private int Jx3,Jy3;
	@SuppressWarnings("unused")
	private int Jx4,Jy4;
	
	//有参构造函数
	public Coordinate_Transformation(Vector<Line> lv,Vector<MyPoint>v) {
		super();
		//点容器的引用的传入
		pointsVector = v;
		//缓存边框四点的坐标值
		this.x1 = lv.elementAt(0).x0;
		this.y1 = lv.elementAt(0).y0;
		this.x2 = lv.elementAt(1).x0;
		this.y2 = lv.elementAt(1).y0;
		this.x3 = lv.elementAt(2).x0;
		this.y3 = lv.elementAt(2).y0;
		this.x4 = lv.elementAt(3).x0;
		this.y4 = lv.elementAt(3).y0;
		//计算两点之间的距离
    	heigh_Distance = PointToLine_Distance.lineSpace(x1,y1,x4,y4);
		width_Distance = PointToLine_Distance.lineSpace(x1,y1,x2,y2);
		
		//转换坐标
		Jx1 = x1;
		Jy1 = y1;
		Jx2 = x1 + (int)width_Distance;
		Jy2 = y1;
		Jx3 = x1 + (int)width_Distance;
		Jy3 = y1 + (int)heigh_Distance;
		Jx4 = x1;
		Jy4 = y1 + (int)heigh_Distance;
	}
	//转换边框四点的坐标时斜坐标转换成正坐标
	public void change_coordinate() {
    	
		//创建求点到直线距离的对象
		PointToLine_Distance p_Line_Distance = new PointToLine_Distance();
		//循环容器，这里不需要对i局部变量进行++操作，容器会自动循环搜索数据
		for(int i=0; i<pointsVector.size();i++){
			//获取容器中的元素
			MyPoint tmp = (MyPoint) pointsVector.elementAt(i);
			//设置原始点对象的标记值
			tmp.link_Flag = i;
			//创建新容器的MyPoint元素
			MyPoint m = new MyPoint();
			//设置新建点对象的标记值，并与对应的原始点对象的标记值相同，以便一一对应
			m.link_Flag = i;
			//创建点对象
			m.point = new Point();
			//转换节点坐标
			m.point.x = Jx1 + (int)p_Line_Distance.getDistance(x1, y1, x4, y4, tmp.point.x, tmp.point.y);
			m.point.y = Jy1 + (int)p_Line_Distance.getDistance(x1, y1, x2, y2, tmp.point.x, tmp.point.y);
			//将转换后的节点新坐标加入关节点容器中
			v_Joint.add(m);
		}
				
    }
    //对人体节点所在的位置进行分层，并将分层过的节点分别存入vector1，vector2，vector3，vector4，vector5容器中
    public void divide_Layer(){
    	//获取边框中点横坐标
    	double middle = (Jx1 + Jx2)/2;
    	//循环节点容器v_Joint
    	for(int i=0; i<v_Joint.size();i++){
    		MyPoint tmp = (MyPoint) v_Joint.elementAt(i);
    		//1、获取属于中间层的点，放入vector1容器中
    		if(tmp.point.x >middle - width_Distance/12 && tmp.point.x <middle + width_Distance/12){
//    			//获取三个点之后，退出循环
//    			if(count >= 3){
//    				count = 0;
//    				break;
//    			}
    				addPoints(tmp, vector1);
    		}
    		//2、获取左层的点，放入vector2容器中
    		else if(tmp.point.x >Jx1 && tmp.point.x < Jx1 + width_Distance/3){
    			addPoints(tmp, vector2);
    		}
    		//3、获取右层的点，放入vector3容器中
    		else if(tmp.point.x >Jx1 + width_Distance*2/3 && tmp.point.x <Jx2){
    			addPoints(tmp, vector3);
    		}
    	}
    	
    	//对中间层的点元素进行排序，按y坐标排序
    	MyPoint[] arr1 = sort(vector1);
    	for (int i = 0; i < arr1.length; i++) {
    		vector1.add(arr1[i]);
    	}
    	
    	//对点容器进行排序
    	MyPoint[] arr2 = sort(vector2);
    	//定义标记个数变量，并初始化为0
    	int count1 = 0;
    	for (int i = 0; i < arr2.length; i++) {
    		if(count1 < 3){
    			vector2.add(arr2[i]);
    			count1++;
    			continue;
    		}
    		vector4.add(arr2[i]);
    	}
    	
    	//对点容器进行排序，按y坐标排序
    	MyPoint[] arr3 = sort(vector3);
    	//定义标记个数变量
    	int count2 = 0;
    	for (int i = 0; i < arr3.length; i++) {
    		if(count2 < 3){
    			vector3.add(arr3[i]);
    			count2++;
    			continue;
    		}
    		vector5.add(arr3[i]);
    	}
    }
    //用于将该点对应的原始点对象加入到传入的容器中去
	private void addPoints(MyPoint tmp,Vector<MyPoint>v){
		//循环原始点容器
		for(int k=0; k<pointsVector.size();k++){
			MyPoint pt = (MyPoint) pointsVector.elementAt(k);
			//判断转换坐标后的点对象是否是与原始点对象对应的点对象
			if(tmp.link_Flag == pt.link_Flag){
				//创建新容器的MyPoint元素
				MyPoint m = new MyPoint();
				m.point = new Point();
				m.point.x = pt.point.x;
				m.point.y = pt.point.y;
//				//将得到的点去除
//				v_Joint.removeElement(tmp);
				//把点加入容器
				v.add(m);
				//找到后便退出循环
				break;
			}
		}
	}
    //排序函数，按照容器中元素的点坐标的y值的大小进行排序，最后传入的容器会被清空
	private MyPoint[] sort(Vector<MyPoint> v) {
		//创建一个缓存对象，用于排序时的值替换
		MyPoint myPoint;
		//创建一个数组用于存放排好序的对象
		MyPoint arr[] = null;
		//传入的容器的元素个数为六个
		if(v.size() == 6){
			arr = new MyPoint[6];
		}
		//传入的容器的元素个数为三个
		else if(v.size() == 3){
			arr = new MyPoint[3];
		}
		//创建j变量，移动数组指针
		int j=0;
		for(int i=0; i<v.size();i++){
			MyPoint tmp = (MyPoint) v.elementAt(i);
			MyPoint mp = new MyPoint();
			mp.point = new Point();
			//将容器中的元素的坐标值赋给新建的点对象中
			mp.point.x = tmp.point.x;
			mp.point.y = tmp.point.y;
			//把点对象放入对象数组中
			arr[j++] = mp;
		}
		//冒泡排序法，按点对象的y坐标值从小到大一次排序
		for (int pass = 1; pass < arr.length; pass++) {
			for(int i =0; i<arr.length-pass; i++){
				if(arr[i].point.y>arr[i+1].point.y){
					myPoint = arr[i];
					arr[i] = arr[i+1];
					arr[i+1] = myPoint;
				}
			}
		}
		//清空容器
		v.clear();
		//返回排序后的点对象数组
		return arr;
	}

  	
//	double Angle = getAngle();
//	public double getAngle() {
//		double a = PointToLine_Distance.lineSpace(x3,y3,x2,y2);
//		double b = PointToLine_Distance.lineSpace(x3,y3,x4,y4);
//		double c = PointToLine_Distance.lineSpace(x2,y2,x4,y4);
//		
//		//计算余弦值
//		double cosine_Value = (double)(a*a + b*b -c*c )/(2*a*b);
//		//计算角度
//		double angle = Math.acos(cosine_Value);
//		//坐标转换
//		Jx1=(X1-Y1)Math.sin（angle);	
//		Jy1=(X1+Y1)Math.sin（angle);
//		Jx2=(X2+Y2)Math.sin（angle);
//		Jy2=(Y2-X2)Math.sin（angle);
//		
//		return 0;
//	}
}
    
