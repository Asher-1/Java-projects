/**
 * 
 */
package cn.detector.core;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Vector;

import javax.swing.JOptionPane;

import cn.detector.view.MyLabel;

/**
 * 画线逻辑算法类
 *
 */
//绘画逻辑类及其内的逻辑方法
public class Mydraw {
	
	MyLabel myLabel;
	public Mydraw(MyLabel myLabel){// 带MyaLabel参数类型的构造函数
		this.myLabel = myLabel;
	}
	//调用画点方法
	public void myDrawPoints(MyPoint myP,Graphics g){
//		 g.fillOval((int)myP.point1.x,(int)myP.point1.y,5,5);
//		 g.fillOval((int)myP.point2.x,(int)myP.point2.y,5,5);
		
		g.fillRect((int)(myP.point.x - 3), (int)(myP.point.y - 3), 6, 6);
	
	}
	public void myDrawLine(Vector<MyPoint>v1,Vector<MyPoint>v2,Vector<MyPoint>v3,Vector<MyPoint>v4,Vector<MyPoint>v5,Graphics g){
		g.setColor(Color.GREEN); // 设置画笔颜色为绿色
		MyPoint v1_first = null;
		MyPoint v1_second = null;
		MyPoint v1_third = null;
		MyPoint v2_first = null;
		MyPoint v2_second = null;
		MyPoint v2_third = null;
		MyPoint v3_first = null;
		MyPoint v3_second = null;
		MyPoint v3_third = null;
		MyPoint v4_first = null;
		MyPoint v4_second = null;
		MyPoint v5_first = null;
		MyPoint v5_second = null;
		//循环v1容器
		for (int i = 0; i < v1.size(); i++) {

			//根据顺序设置点
			if(v1.elementAt(i).order == 1){
				v1_first = (MyPoint) v1.elementAt(i);
			}
			else if(v1.elementAt(i).order == 2){
				v1_second = (MyPoint) v1.elementAt(i);
			}
			else if(v1.elementAt(i).order == 3){
				v1_third = (MyPoint) v1.elementAt(i);
			}
		}
		// 容错代码
		if(v1_first == null | v1_second == null | v1_third == null){
			int sfd = JOptionPane.showConfirmDialog(null, "关节注解错误，确认是否重置？", "重置坐标确认对话框", JOptionPane.YES_NO_OPTION);
			 if(sfd == JOptionPane.YES_OPTION){
				 myLabel.reset();//设置重置参数，清空缓存
				 myLabel.repaint(); // 重绘界面
				return;
			}
			
		}
		//根据顺序画线
		g.drawLine(v1_first.point.x,v1_first.point.y,v1_second.point.x,v1_second.point.y); // 连接1号点与2号点
		g.drawLine(v1_second.point.x,v1_second.point.y,v1_third.point.x,v1_third.point.y); // 连接2号点与3号点
		
		//循环v2容器
		for (int i = 0; i < v2.size(); i++) {

			//根据顺序设置点
			if(v2.elementAt(i).order == 1){
				v2_first = (MyPoint) v2.elementAt(i);
			}
			else if(v2.elementAt(i).order == 2){
				v2_second = (MyPoint) v2.elementAt(i);
			}
			else if(v2.elementAt(i).order == 3){
				v2_third = (MyPoint) v2.elementAt(i);
			}	
		}
		
		// 容错代码
		if(v2_first == null | v2_second == null | v2_third == null){
		int sfd = JOptionPane.showConfirmDialog(null, "关节注解错误，确认是否重置？", "重置坐标确认对话框", JOptionPane.YES_NO_OPTION);
			if(sfd == JOptionPane.YES_OPTION){
				myLabel.reset();//设置重置参数，清空缓存
				myLabel.repaint(); // 重绘界面
				return;
			}
		}	
		//根据顺序画线
		g.drawLine(v2_first.point.x,v2_first.point.y,v1_second.point.x,v1_second.point.y); // 连接1号点与v1的2号点
		g.drawLine(v2_first.point.x,v2_first.point.y,v2_second.point.x,v2_second.point.y); // 连接1号点与2号点
		g.drawLine(v2_second.point.x,v2_second.point.y,v2_third.point.x,v2_third.point.y); // 连接2号点与3号点
		//循环v3容器
		for (int i = 0; i < v3.size(); i++) {

			//根据顺序设置点
			if(v3.elementAt(i).order == 1){
				v3_first = (MyPoint) v3.elementAt(i);
			}
			else if(v3.elementAt(i).order == 2){
				v3_second = (MyPoint) v3.elementAt(i);
			}
			else if(v3.elementAt(i).order == 3){
				v3_third = (MyPoint) v3.elementAt(i);
			}	
		}
		
		// 容错代码
		if(v3_first == null | v3_second == null | v3_third == null){
			int sf = JOptionPane.showConfirmDialog(null, "关节注解错误，确认是否重置？", "重置坐标确认对话框", JOptionPane.YES_NO_OPTION);
			 if(sf == JOptionPane.YES_OPTION){
				 myLabel.reset();//设置重置参数，清空缓存
				 myLabel.repaint(); // 重绘界面
				return;
			}
		}
		//根据顺序画线
		g.drawLine(v3_first.point.x,v3_first.point.y,v1_second.point.x,v1_second.point.y); // 连接1号点与v1的2号点
		g.drawLine(v3_first.point.x,v3_first.point.y,v3_second.point.x,v3_second.point.y); // 连接1号点与2号点
		g.drawLine(v3_second.point.x,v3_second.point.y,v3_third.point.x,v3_third.point.y); // 连接2号点与3号点
		
		//循环v4容器
		for (int i = 0; i < v4.size(); i++) {

			//根据顺序设置点
			if(v4.elementAt(i).order == 1){
				v4_first = (MyPoint) v4.elementAt(i);
			}
			else if(v4.elementAt(i).order == 2){
				v4_second = (MyPoint) v4.elementAt(i);
			}
		}
		
		// 容错代码
		if(v4_first == null | v4_second == null){
			int d = JOptionPane.showConfirmDialog(null, "关节注解错误，确认是否重置？", "重置坐标确认对话框", JOptionPane.YES_NO_OPTION);
			 if(d == JOptionPane.YES_OPTION){
				 myLabel.reset();//设置重置参数，清空缓存
				 myLabel.repaint(); // 重绘界面
				return;
			}
		}
		//根据顺序画线
		g.drawLine(v4_first.point.x,v4_first.point.y,v1_third.point.x,v1_third.point.y); // 连接1号点与v1的3号点
		g.drawLine(v4_first.point.x,v4_first.point.y,v4_second.point.x,v4_second.point.y); // 连接1号点与2号点
		//循环v5容器
		for (int i = 0; i < v5.size(); i++) {

			//根据顺序设置点
			if(v5.elementAt(i).order == 1){
				v5_first = (MyPoint) v5.elementAt(i);
			}
			else if(v5.elementAt(i).order == 2){
				v5_second = (MyPoint) v5.elementAt(i);
			}
		}
		
		// 容错代码
		if(v5_first == null | v5_second == null){
			int d5 = JOptionPane.showConfirmDialog(null, "关节注解错误，确认是否重置？", "重置坐标确认对话框", JOptionPane.YES_NO_OPTION);
			 if(d5 == JOptionPane.YES_OPTION){
				 myLabel.reset();//设置重置参数，清空缓存
				 myLabel.repaint(); // 重绘界面
				return;
			}
		}	 
		//根据顺序画线
		g.drawLine(v5_first.point.x,v5_first.point.y,v1_third.point.x,v1_third.point.y); // 连接1号点与v1的3号点
		g.drawLine(v5_first.point.x,v5_first.point.y,v5_second.point.x,v5_second.point.y); // 连接1号点与2号点
		g.setColor(Color.RED); // 重置画笔颜色为默认的红色
	}

	// 中点画线法
	public void MydrawOval1(int x0, int y0, int x1, int y1, Graphics g) {
		int a, b, delta1, delta2, d, x, y;
		float m;
		if (x1 < x0) {
			d = x0;
			x0 = x1;
			x1 = d;
			d = y0;
			y0 = y1;
			y1 = d;
		}
		a = y0 - y1;
		b = x1 - x0;
		if (b == 0)
			m = -1 * a * 100;
		else
			m = (float) a / (x0 - x1);
		x = x0;
		y = y0; // drawpoint(x,y,g);
		g.drawOval(x, y, 1, 1);
		if (m >= 0 && m <= 1) {
			d = 2 * a + b;
			delta1 = 2 * a;
			delta2 = 2 * (a + b);
			while (x < x1) {
				if (d <= 0) {
					x++;
					y++;
					d += delta2;
				} else {
					x++;
					d += delta1;
				} // drawpoint(x,y,g);
				g.drawOval(x, y, 1, 1);
			}
		} 
		else if (m <= 0 && m >= -1) {
			d = 2 * a - b;
			delta1 = 2 * a - 2 * b;
			delta2 = 2 * a;
			while (x < x1) {
				if (d > 0) {
					x++;
					y--;
					d += delta1;
				} else {
					x++;
					d += delta2;
				} // drawpoint(x,y,g);
				g.drawOval(x, y, 1, 1);
			}
		} 
		else if (m > 1) {
			d = a + 2 * b;
			delta1 = 2 * (a + b);
			delta2 = 2 * b;
			while (y < y1) {
				if (d > 0) {
					x++;
					y++;
					d += delta1;
				} 
				else {
					y++;
					d += delta2;
				} // drawpoint(x,y,g);
				g.drawOval(x, y, 1, 1);
			}
		} 
		else {
			d = a - 2 * b;
			delta1 = -2 * b;
			delta2 = 2 * (a - b);
			while (y > y1) {
				if (d <= 0) {
					x++;
					y--;
					d += delta2;
				} 
				else {
					y--;
					d += delta1;
				} // drawpoint(x,y,g); g.drawOval(x,y,1,1);

			}
		}
	}

	// 数值微分法
	public void MydrawOval2(int x0, int y0, int x1, int y1, Graphics g) {
		int a, b, n, k;
		float xinc, yinc, x, y;
		b = x1 - x0;
		a = y1 - y0;
		if (Math.abs(b) > Math.abs(a))
			n = Math.abs(b);
		else
		n = Math.abs(a);
		xinc = (float) b / n;
		yinc = (float) a / n;
		x = (float) x0;
		y = (float) y0;
		for (k = 1; k <= n; k++) {
			// Drawpixel((int)(x+0.5),(int) (y+0.5),color);
			int i = (int) (x + 0.5);
			int j = (int) (y + 0.5);
			g.drawOval(i, j, 1, 1);
			x += xinc;
			y += yinc;
		}

	}

// Bresenham算法2
public void MydrawOval3(int x1, int y1, int x2, int y2, Graphics g) {
	int dx = x2 - x1;
	int dy = y2 - y1;
	int ux, uy; // = ((dx > 0) << 1) - 1;//x的增量方向，取或-1
	// int uy// = ((dy > 0) << 1) - 1;//y的增量方向，取或-1
	if (dx > 0) {
		ux = 1;
	} else {
		ux = -1;
	}
	if (dy > 0) {
		uy = 1;
	} else {
		uy = -1;
	}

	int x = x1, y = y1, eps;// eps为累加误差

	eps = 0;
	dx = Math.abs(dx);
	dy = Math.abs(dy);
	if (dx > dy) {
		for (x = x1; x != x2; x += ux) {
			g.drawOval(x, y, 1, 1);
			eps += dy;
			if ((eps << 1) >= dx) {
				y += uy;
				eps -= dx;
			}
		}
	} else {
		for (y = y1; y != y2; y += uy) {
			g.drawOval(x, y, 1, 1);
			eps += dx;
			if ((eps << 1) >= dy) {
				x += ux;
				eps -= dy;
				}
			}
		}
	}

}
